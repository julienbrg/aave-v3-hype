{"abi":[{"type":"function","name":"POOL","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IPool"}],"stateMutability":"view"},{"type":"function","name":"POOL_ADDRESSES_PROVIDER","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IPoolAddressesProvider"}],"stateMutability":"view"},{"type":"function","name":"aToken","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"depositATokens","inputs":[{"name":"assets","type":"uint256","internalType":"uint256"},{"name":"receiver","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"depositWithPermit","inputs":[{"name":"assets","type":"uint256","internalType":"uint256"},{"name":"receiver","type":"address","internalType":"address"},{"name":"deadline","type":"uint256","internalType":"uint256"},{"name":"sig","type":"tuple","internalType":"struct IERC4626StataToken.SignatureParams","components":[{"name":"v","type":"uint8","internalType":"uint8"},{"name":"r","type":"bytes32","internalType":"bytes32"},{"name":"s","type":"bytes32","internalType":"bytes32"}]},{"name":"depositToAave","type":"bool","internalType":"bool"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"latestAnswer","inputs":[],"outputs":[{"name":"","type":"int256","internalType":"int256"}],"stateMutability":"view"},{"type":"function","name":"redeemATokens","inputs":[{"name":"shares","type":"uint256","internalType":"uint256"},{"name":"receiver","type":"address","internalType":"address"},{"name":"owner","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"error","name":"OnlyPauseGuardian","inputs":[{"name":"caller","type":"address","internalType":"address"}]},{"type":"error","name":"PoolAddressMismatch","inputs":[{"name":"pool","type":"address","internalType":"address"}]},{"type":"error","name":"StaticATokenInvalidZeroShares","inputs":[]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"POOL()":"7535d246","POOL_ADDRESSES_PROVIDER()":"311cd5a4","aToken()":"a0c1f15e","depositATokens(uint256,address)":"e25ec349","depositWithPermit(uint256,address,uint256,(uint8,bytes32,bytes32),bool)":"cabc777e","latestAnswer()":"50d25bcd","redeemATokens(uint256,address,address)":"090edf9a"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"OnlyPauseGuardian\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolAddressMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StaticATokenInvalidZeroShares\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL\",\"outputs\":[{\"internalType\":\"contract IPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_ADDRESSES_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"depositATokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IERC4626StataToken.SignatureParams\",\"name\":\"sig\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"depositToAave\",\"type\":\"bool\"}],\"name\":\"depositWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeemATokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"POOL()\":{\"returns\":{\"_0\":\"The pool address.\"}},\"POOL_ADDRESSES_PROVIDER()\":{\"returns\":{\"_0\":\"The poolAddressesProvider address.\"}},\"aToken()\":{\"returns\":{\"_0\":\"address The aToken address.\"}},\"depositATokens(uint256,address)\":{\"params\":{\"assets\":\"The amount of aTokens to deposit (e.g. deposit of 100 aUSDC)\",\"receiver\":\"The address that will receive the static aTokens\"},\"returns\":{\"_0\":\"uint256 The amount of StaticAToken minted, static balance*\"}},\"depositWithPermit(uint256,address,uint256,(uint8,bytes32,bytes32),bool)\":{\"params\":{\"assets\":\"The amount of aTokens or underlying to deposit\",\"deadline\":\"Must be a timestamp in the future\",\"receiver\":\"The address that will receive the static aTokens\",\"sig\":\"A `secp256k1` signature params from `msgSender()`\"},\"returns\":{\"_0\":\"uint256 The amount of StaticAToken minted, static balance*\"}},\"latestAnswer()\":{\"returns\":{\"_0\":\"price the current asset price.\"}},\"redeemATokens(uint256,address,address)\":{\"params\":{\"receiver\":\"The address that will receive the amount of `ASSET` withdrawn from the Aave protocol\",\"shares\":\"The shares to withdraw, in static balance of StaticAToken\"},\"returns\":{\"_0\":\"amountToWithdraw: aToken send to `receiver`, dynamic balance*\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"POOL()\":{\"notice\":\"The pool associated with the aToken.\"},\"POOL_ADDRESSES_PROVIDER()\":{\"notice\":\"The poolAddressesProvider associated with the pool.\"},\"aToken()\":{\"notice\":\"The aToken used inside the 4626 vault.\"},\"depositATokens(uint256,address)\":{\"notice\":\"Deposits aTokens and mints static aTokens to msg.sender\"},\"depositWithPermit(uint256,address,uint256,(uint8,bytes32,bytes32),bool)\":{\"notice\":\"Universal deposit method for proving aToken or underlying liquidity with permit\"},\"latestAnswer()\":{\"notice\":\"Returns the current asset price of the stataToken. The price is calculated as `underlying_price * exchangeRate`. It is important to note that: - `underlying_price` is the price obtained by the aave-oracle and is subject to it's internal pricing mechanisms. - as the price is scaled over the exchangeRate, but maintains the same precision as the underlying the price might be underestimated by 1 unit. - when pricing multiple `shares` as `shares * price` keep in mind that the error compounds.\"},\"redeemATokens(uint256,address,address)\":{\"notice\":\"Burns `shares` of static aToken, with receiver receiving the corresponding amount of aToken\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/extensions/stata-token/interfaces/IERC4626StataToken.sol\":\"IERC4626StataToken\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts-upgradeable/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/\",\":solidity-utils/=lib/solidity-utils/src/\"]},\"sources\":{\"src/contracts/extensions/stata-token/interfaces/IERC4626StataToken.sol\":{\"keccak256\":\"0x150ba27a2550b27ecbecb737ac1c2ca3ef2b83a3080e26625ea125ae107ce018\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ac8c49d8a588cd43bb9b1eba40bb9f2f0ec05597d8228bbef3fe8b74e8b9649a\",\"dweb:/ipfs/QmbcZ6nEkuoSncqVoBp3YXdhC3KfeVt6PjvLRpUqufcPJA\"]},\"src/contracts/interfaces/IPool.sol\":{\"keccak256\":\"0x9b29acbc960b19ec5db42e1835eb6d9a37d6e88de09eab2234518f8a4f194682\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f995836c3df4a8e434ae9607ee69dd993c4db52db7498e9a74439de0e8bb3e49\",\"dweb:/ipfs/QmQPcJP7HsYe7qf5iorymE3GHWHm1rLhNjACHhShK3w5ZT\"]},\"src/contracts/interfaces/IPoolAddressesProvider.sol\":{\"keccak256\":\"0xa60921cf54e91ca8db038effeffc876089b2e72dbf01d68a10ff461770d345e5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0de2fd03bf5cd6ae8718a486e5d615c67b260d0608b9fb7076888a4bfaa0e4b4\",\"dweb:/ipfs/QmXpdmxMugyJcBFAGJEruB78bkkuTwrH9esYRaS6wiQoMs\"]},\"src/contracts/protocol/libraries/types/DataTypes.sol\":{\"keccak256\":\"0xcaacba608c81a6bdb94cc99b1daf451bcbd60c6a663146e6c630258b22a7f336\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399a0988113445b5beeff7513eb5355c09c4f291ff65e09e399f16550e4a65fb\",\"dweb:/ipfs/QmQbN4FxqpVkWVT9YFEtLwu8MPSd8yAfCTqvnhArnd6Sc2\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"caller","type":"address"}],"type":"error","name":"OnlyPauseGuardian"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"type":"error","name":"PoolAddressMismatch"},{"inputs":[],"type":"error","name":"StaticATokenInvalidZeroShares"},{"inputs":[],"stateMutability":"view","type":"function","name":"POOL","outputs":[{"internalType":"contract IPool","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"POOL_ADDRESSES_PROVIDER","outputs":[{"internalType":"contract IPoolAddressesProvider","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"aToken","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"depositATokens","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"struct IERC4626StataToken.SignatureParams","name":"sig","type":"tuple","components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}]},{"internalType":"bool","name":"depositToAave","type":"bool"}],"stateMutability":"nonpayable","type":"function","name":"depositWithPermit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"latestAnswer","outputs":[{"internalType":"int256","name":"","type":"int256"}]},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"redeemATokens","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]}],"devdoc":{"kind":"dev","methods":{"POOL()":{"returns":{"_0":"The pool address."}},"POOL_ADDRESSES_PROVIDER()":{"returns":{"_0":"The poolAddressesProvider address."}},"aToken()":{"returns":{"_0":"address The aToken address."}},"depositATokens(uint256,address)":{"params":{"assets":"The amount of aTokens to deposit (e.g. deposit of 100 aUSDC)","receiver":"The address that will receive the static aTokens"},"returns":{"_0":"uint256 The amount of StaticAToken minted, static balance*"}},"depositWithPermit(uint256,address,uint256,(uint8,bytes32,bytes32),bool)":{"params":{"assets":"The amount of aTokens or underlying to deposit","deadline":"Must be a timestamp in the future","receiver":"The address that will receive the static aTokens","sig":"A `secp256k1` signature params from `msgSender()`"},"returns":{"_0":"uint256 The amount of StaticAToken minted, static balance*"}},"latestAnswer()":{"returns":{"_0":"price the current asset price."}},"redeemATokens(uint256,address,address)":{"params":{"receiver":"The address that will receive the amount of `ASSET` withdrawn from the Aave protocol","shares":"The shares to withdraw, in static balance of StaticAToken"},"returns":{"_0":"amountToWithdraw: aToken send to `receiver`, dynamic balance*"}}},"version":1},"userdoc":{"kind":"user","methods":{"POOL()":{"notice":"The pool associated with the aToken."},"POOL_ADDRESSES_PROVIDER()":{"notice":"The poolAddressesProvider associated with the pool."},"aToken()":{"notice":"The aToken used inside the 4626 vault."},"depositATokens(uint256,address)":{"notice":"Deposits aTokens and mints static aTokens to msg.sender"},"depositWithPermit(uint256,address,uint256,(uint8,bytes32,bytes32),bool)":{"notice":"Universal deposit method for proving aToken or underlying liquidity with permit"},"latestAnswer()":{"notice":"Returns the current asset price of the stataToken. The price is calculated as `underlying_price * exchangeRate`. It is important to note that: - `underlying_price` is the price obtained by the aave-oracle and is subject to it's internal pricing mechanisms. - as the price is scaled over the exchangeRate, but maintains the same precision as the underlying the price might be underestimated by 1 unit. - when pricing multiple `shares` as `shares * price` keep in mind that the error compounds."},"redeemATokens(uint256,address,address)":{"notice":"Burns `shares` of static aToken, with receiver receiving the corresponding amount of aToken"}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts-upgradeable/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/","openzeppelin-contracts-upgradeable/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/","solidity-utils/=lib/solidity-utils/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"none"},"compilationTarget":{"src/contracts/extensions/stata-token/interfaces/IERC4626StataToken.sol":"IERC4626StataToken"},"evmVersion":"shanghai","libraries":{}},"sources":{"src/contracts/extensions/stata-token/interfaces/IERC4626StataToken.sol":{"keccak256":"0x150ba27a2550b27ecbecb737ac1c2ca3ef2b83a3080e26625ea125ae107ce018","urls":["bzz-raw://ac8c49d8a588cd43bb9b1eba40bb9f2f0ec05597d8228bbef3fe8b74e8b9649a","dweb:/ipfs/QmbcZ6nEkuoSncqVoBp3YXdhC3KfeVt6PjvLRpUqufcPJA"],"license":"MIT"},"src/contracts/interfaces/IPool.sol":{"keccak256":"0x9b29acbc960b19ec5db42e1835eb6d9a37d6e88de09eab2234518f8a4f194682","urls":["bzz-raw://f995836c3df4a8e434ae9607ee69dd993c4db52db7498e9a74439de0e8bb3e49","dweb:/ipfs/QmQPcJP7HsYe7qf5iorymE3GHWHm1rLhNjACHhShK3w5ZT"],"license":"MIT"},"src/contracts/interfaces/IPoolAddressesProvider.sol":{"keccak256":"0xa60921cf54e91ca8db038effeffc876089b2e72dbf01d68a10ff461770d345e5","urls":["bzz-raw://0de2fd03bf5cd6ae8718a486e5d615c67b260d0608b9fb7076888a4bfaa0e4b4","dweb:/ipfs/QmXpdmxMugyJcBFAGJEruB78bkkuTwrH9esYRaS6wiQoMs"],"license":"MIT"},"src/contracts/protocol/libraries/types/DataTypes.sol":{"keccak256":"0xcaacba608c81a6bdb94cc99b1daf451bcbd60c6a663146e6c630258b22a7f336","urls":["bzz-raw://399a0988113445b5beeff7513eb5355c09c4f291ff65e09e399f16550e4a65fb","dweb:/ipfs/QmQbN4FxqpVkWVT9YFEtLwu8MPSd8yAfCTqvnhArnd6Sc2"],"license":"MIT"}},"version":1},"id":109}